<?php

namespace frontend\models;

use Yii;

/**
 * This is the model class for table "order".
 *
 * @property integer $id
 * @property integer $member_id
 * @property string $name
 * @property string $province_name
 * @property string $city_name
 * @property string $area_name
 * @property string $detail_address
 * @property string $tel
 * @property integer $delivary_id
 * @property string $delivary_name
 * @property string $delivary_price
 * @property integer $pay_type_id
 * @property string $pay_type_name
 * @property string $price
 * @property string $status
 * @property string $trade_no
 * @property integer $create_time
 */
class Order extends \yii\db\ActiveRecord
{
    //地址id
    public $address_id;

    //送货方式
    public static $delivarys = [
        1=>'京西快递 5元 速度非常快，性价比非常高',
        2=>'顺丰快递 20元 速度很快，价格贵',
        3=>'圆通快递 10元 速度一般，价格便宜',
        4=>'EMS 15元 速度一般，价格一般',
        5=>'上门自提 0元 随时恭候您的光临',
    ];
    //运费
    public static  $delivary_prices = [
        1=>'5',
        2=>'20',
        3=>'3',
        4=>'15',
        5=>'0',
    ];
    //支付方式
    public static $payments = [
        1=>'货到付款',
        //2=>'支付宝',
        3=>'微信支付',
        4=>'银联在线'
    ];
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'order';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['member_id', 'name', 'delivary_id', 'delivary_name', 'delivary_price', 'pay_type_id', 'pay_type_name', 'price', 'status'], 'required'],
            [['member_id', 'delivary_id', 'pay_type_id', 'create_time','address_id'], 'integer'],
            [['delivary_price', 'price', 'status'], 'number'],
            [['name', 'province_name', 'city_name', 'area_name', 'delivary_name', 'pay_type_name'], 'string', 'max' => 20],
            [['detail_address'], 'string', 'max' => 255],
            [['tel'], 'string', 'max' => 11],
            [['trade_no'], 'string', 'max' => 30],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'member_id' => 'Member ID',
            'name' => 'Name',
            'province_name' => 'Province Name',
            'city_name' => 'City Name',
            'area_name' => 'Area Name',
            'detail_address' => 'Detail Address',
            'tel' => 'Tel',
            'delivary_id' => 'Delivary ID',
            'delivary_name' => 'Delivary Name',
            'delivary_price' => 'Delivary Price',
            'pay_type_id' => 'Pay Type ID',
            'pay_type_name' => 'Pay Type Name',
            'price' => 'Price',
            'status' => 'Status',
            'trade_no' => 'Trade No',
            'create_time' => 'Create Time',
        ];
    }

    public function beforeValidate()
    {
        $member_id = Yii::$app->user->id;
        //根据地址id获取完整地址信息，赋值
        $address = Address::findOne(['id'=>$this->address_id,'member_id'=>$member_id]);
        if($address==null){
            $this->addError('address_id','地址不存在');
        }
        $this->province_name = $address->provice;
        $this->city_name = $address->city;
        $this->area_name = $address->area;
        $this->detail_address = $address->ress;
        $this->name = $address->name;
        $this->tel = $address->tel;

        $this->member_id = $member_id;

        $this->delivary_name = self::$delivarys[$this->delivary_id];
        $this->delivary_price = self::$delivary_prices[$this->delivary_id];

        $this->pay_type_name = self::$payments[$this->pay_type_id];

        //商品总价格
        $this->price = 0;
        $carts = Cart::findAll(['member_id'=>$member_id]);
        foreach($carts as $cart){
            $this->price += $cart->goods->shop_price*$cart->amount;
            //检查库存
            if($cart->goods->stock<$cart->amount){
                $this->addError('price',$cart->goods->name.'库存不足');
                //return false;
            }

        }

        $this->status = $this->pay_type_id==1?2:1;

        $this->create_time = time();


        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
}
