<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/3/3
 * Time: 11:31
 */

namespace frontend\models;


use yii\db\ActiveRecord;
use yii\web\IdentityInterface;

class Member extends  ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_ACTIVE  = 1;
     public  $relpassword;//确认密码
     public  $code;//手机验证码
     public  $captcha;//验证码
       const SCENARIO_REG = 'reg';//定义场景 注册
    public  function rules(){
        return [
            [['username', 'password', 'tel', 'email'], 'required'],
            [['email'], 'email'],
            ['tel', 'match','pattern'=>'/^1\d{10}$/'],
            ['code','validateCode','on'=>self::SCENARIO_REG],
            ['captcha','captcha','on'=>self::SCENARIO_REG],
            [['add_time', 'last_login_time', 'last_login_ip', 'status'], 'integer'],
            [['username'], 'string', 'max' => 50],
            [['password', 'email'], 'string', 'max' => 100],
            [['tel'], 'string', 'max' => 11],
            [['salt'], 'string', 'max' => 6],
            [['token'], 'string', 'max' => 32],
        ];

    }
     public  function  attributeLabels(){
         return[

             'relpassword'=>'确认密码:',
             'id' => 'ID',
             'username' => '用户名',
             'password' => '密码',
             'tel' => '手机号码',
             'email' => '邮箱',
             'add_time' => '加入时间',
             'last_login_time' => '最后登录时间',
             'last_login_ip' => '最后登录IP',
             'salt' => '盐',
             'status' => '状态',
             'token' => '令牌',

         ];
     }
    //验证短信
    public  function validateCode($attribute,$params){
        $code = \Yii::$app->session->get('code',null);
        if(!$code || $this->$attribute != $code){
            $this->addError($attribute,'短信验证码不正确,正确的短信验证码是'.$code);
        }
    }

    public function beforeSave($insert)
    {
        if($this->isNewRecord){
            $this->password = \Yii::$app->security->generatePasswordHash($this->password);
            $this->add_time = time();
            $this->status = 1;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Finds an identity by the given ID.
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface the identity object that matches the given ID.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' =>$id, 'status' => self::STATUS_ACTIVE]);
        // TODO: Implement findIdentity() method.
    }

    /**
     * Finds an identity by the given token.
     * @param mixed $token the token to be looked for
     * @param mixed $type the type of the token. The value of this parameter depends on the implementation.
     * For example, [[\yii\filters\auth\HttpBearerAuth]] will set this parameter to be `yii\filters\auth\HttpBearerAuth`.
     * @return IdentityInterface the identity object that matches the given token.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['auth_key' => $token, 'status' => self::STATUS_ACTIVE]);

        // TODO: Implement findIdentityByAccessToken() method.
    }

    /**
     * Returns an ID that can uniquely identify a user identity.
     * @return string|int an ID that uniquely identifies a user identity.
     */
    public function getId()
    {
        return $this->id;
        // TODO: Implement getId() method.
    }

    /**
     * Returns a key that can be used to check the validity of a given identity ID.
     *
     * The key should be unique for each individual user, and should be persistent
     * so that it can be used to check the validity of the user identity.
     *
     * The space of such keys should be big enough to defeat potential identity attacks.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @return string a key that is used to check the validity of a given identity ID.
     * @see validateAuthKey()
     */
    public function getAuthKey()
    {
        return $this->auth_key;
        // TODO: Implement getAuthKey() method.
    }

    /**
     * Validates the given auth key.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @param string $authKey the given auth key
     * @return bool whether the given auth key is valid.
     * @see getAuthKey()
     */
    public function validateAuthKey($authKey)
    {
        return $authKey == $this->auth_key;
        // TODO: Implement validateAuthKey() method.
    }
}